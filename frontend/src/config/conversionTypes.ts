// Remove imports for non-existent files/types
// import { OptionsComponentProps } from '../types';
// import JpgOptions from '../components/core/options/JpgOptions';
// import PngOptions from '../components/core/options/PngOptions';

// Keep the newer, more detailed structure
export interface ConversionOption {
  value: string; // e.g., 'jpg', 'png', 'wav'
  label: string; // e.g., 'JPG', 'PNG', 'WAV'
  // OptionsComponent?: React.FC<OptionsComponentProps>; // Remove reference to non-existent type
}

export interface ConversionCategory {
  label: string; // e.g., 'Image', 'Audio', 'Document'
  value: string; // e.g., 'image', 'audio', 'document'
  acceptedMimeTypes: string[]; // MIME types accepted for this category
  outputOptions: ConversionOption[];
}

// This is the primary configuration array we'll use going forward
export const conversionTypes: ConversionCategory[] = [
  {
    label: "Image (JPG, PNG, WEBP, GIF)",
    value: "image",
    acceptedMimeTypes: [
      "image/jpeg",
      "image/png",
      "image/gif",
      "image/webp",
      "image/bmp",
      "image/tiff",
    ],
    outputOptions: [
      // Remove references to non-existent components
      { value: "jpg", label: "JPG" /* OptionsComponent: JpgOptions */ },
      { value: "png", label: "PNG" /* OptionsComponent: PngOptions */ },
      { value: "webp", label: "WEBP" },
      { value: "gif", label: "GIF" },
      { value: "bmp", label: "BMP" },
      { value: "tiff", label: "TIFF" },
      // Add other image formats here
    ],
  },
  {
    label: "Audio (MP3, WAV, OGG, AAC)",
    value: "audio",
    acceptedMimeTypes: [
      "audio/mpeg",
      "audio/wav",
      "audio/ogg",
      "audio/aac",
      "audio/flac",
    ],
    outputOptions: [
      { value: "mp3", label: "MP3" },
      { value: "wav", label: "WAV" },
      { value: "ogg", label: "OGG" },
      { value: "aac", label: "AAC" },
      { value: "flac", label: "FLAC" },
      // Add other audio formats here
    ],
  },
  {
    label: "Document (DOCX)",
    value: "document",
    acceptedMimeTypes: [
      "text/plain", // .txt
      "text/markdown", // .md
      "application/pdf",
      "application/msword",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "application/vnd.oasis.opendocument.text",
      "application/rtf",
    ],
    outputOptions: [
      { value: "pdf", label: "PDF" },
      // Remove DOCX and TXT options as they are not reliably generated by the current backend endpoint
      // { value: 'docx', label: 'DOCX' },
      // { value: 'txt', label: 'TXT' },
    ],
  },
  // Add Video Category
  {
    label: "Video (MP4, WEBM, AVI, MOV)",
    value: "video",
    acceptedMimeTypes: [
      "video/mp4",
      "video/webm",
      "video/avi",
      "video/quicktime", // .mov
      "video/x-msvideo", // Another common AVI MIME type
      "video/x-matroska", // .mkv
    ],
    outputOptions: [
      { value: "mp4", label: "MP4" },
      { value: "webm", label: "WEBM" },
      { value: "avi", label: "AVI" },
      { value: "mov", label: "MOV" },
      { value: "mkv", label: "MKV" },
      // Potentially add GIF here as well?
    ],
  },
  // Add other categories like 'Video', etc. here
];

// --- Keep the helper functions associated with the ConversionCategory structure ---

export const getOutputOptionsByCategory = (
  categoryValue: string,
): ConversionOption[] => {
  const category = conversionTypes.find((c) => c.value === categoryValue);
  return category ? category.outputOptions : [];
};

// Helper function to get accepted MIME types for a category
export const getAcceptedMimeTypesByCategory = (
  categoryValue: string,
): string[] => {
  const category = conversionTypes.find((c) => c.value === categoryValue);
  return category ? category.acceptedMimeTypes : [];
};

// Helper function to check if a file type is supported for any conversion
export const isFileTypeSupported = (file: File | null): boolean => {
  if (!file) return false;
  return conversionTypes.some((category) =>
    category.acceptedMimeTypes.includes(file.type),
  );
};

// Helper function to get the category based on file type
export const getCategoryFromFile = (
  file: File | null,
): ConversionCategory | undefined => {
  if (!file) return undefined;
  return conversionTypes.find((category) =>
    category.acceptedMimeTypes.includes(file.type),
  );
};
